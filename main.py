import asyncio
import signal
from contextlib import asynccontextmanager
from pyrogram import filters, enums
from pyrogram.errors import ChannelPrivate, RPCError
from pyrogram.types import Message
from app.init import telegram_client
from fastapi import FastAPI
from pyrogram import idle

from app.entities.user import UserToWelcome
from app.repository.new_medblogers_chat_user import Repository

repo = Repository()


async def graceful_shutdown():
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await telegram_client.client.stop()


@asynccontextmanager
async def lifespan(app: FastAPI):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    loop = asyncio.get_running_loop()
    for sig in (signal.SIGINT, signal.SIGTERM):
        loop.add_signal_handler(sig, lambda: asyncio.create_task(graceful_shutdown()))

    pyrogram_task = asyncio.create_task(run_pyrogram_handlers())
    yield
    pyrogram_task.cancel()
    try:
        await pyrogram_task
    except asyncio.CancelledError:
        pass
    await graceful_shutdown()


app = FastAPI(
    title="FastAPI Telegram Group Manager Backend",
    lifespan=lifespan
)


@telegram_client.client.on_message(filters.user([7816396290]))
async def handle_getcource_notification(client, message: Message):
    try:
        if message.text and "–í–∞–º –ø–∏—à–µ—Ç" in message.text:
            await telegram_client.client.send_message(
                chat_id=-1001633906217,
                text="@nutrio_agent @readydoc \n\n–ù–∞ –ø–æ—á—Ç—É –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ü—Ä–æ—à—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ì–ö\n\nP.S. –°–æ–æ–±—â–µ–Ω–∏–µ "
                     "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            )
    except ChannelPrivate:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É -1001633906217")
    except RPCError as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Telegram: {e}")


@telegram_client.client.on_message(filters.regex("test_necheporuk"))
async def handle_getcource_notification(client, message: Message):
    print(f"{message.from_user.id}, {message.from_user.first_name} –¥–µ—Ä–Ω—É–ª–∞—Å—å —Ä—É—á–∫–∞ —Ç–µ—Å—Ç–æ–≤")
    await telegram_client.client.send_message(
        chat_id=message.chat.id,
        text="–ø—Ä–∏–≤–µ—Ç –æ—Ç –±–æ—Ç–∞"
    )


# -1001507744756 - —á–∞—Ç –≤–∞–∫–∞–Ω—Å–∏–π
# -1001711390197 - —á–∞—Ç —Ä–µ–∫–ª–∞–º—ã
@telegram_client.client.on_message(
    filters.chat([-1001507744756, -1001711390197]) & filters.regex(r'has been kicked from the chat because this user is in spam list')
)
async def handle_delete_notification(client, message: Message):
    await message.delete()


@telegram_client.client.on_message(filters.new_chat_members & filters.chat([-1001600505428]))
async def handle_new_chat_member(client, message: Message):
    new_members = message.new_chat_members

    for member in new_members:
        if member.is_bot or repo.check_user_welcome(member.id):
            continue

        repo.create_new_welcome(UserToWelcome(
            tg_id=member.id,
            username=member.username or "",
            first_name=member.first_name
        ))

        name = f'<a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>'
        if message.from_user.username:
            name = f"@{message.from_user.username}"

        await message.reply(
            text=f"{name} –ü–†–ò–î–≠–ü, —é–Ω—ã–π –º–µ–¥–±–ª–æ–≥–µ—Ä–µ—Ü, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ç—É—Å–æ–≤–∫—É üòé\n\n"
                 f"–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –≤—Å–µ –∑–∞–∫—Ä–µ–ø—ã –∏ –Ω–∞–ø–∏—à–∏ –≤ —ç—Ç–æ—Ç —á–∞—Ç #–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –ø–æ –ø—Ä–∏–º–µ—Ä—É https://t.me/c/1600505428/70\n\n"
                 f"–ê –∑–∞—Ç–µ–º –Ω–∞—á–∏–Ω–∞–π:\n"
                 f"- –∏–∑—É—á–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ 150+ –ª–µ–∫—Ü–∏–π –Ω–∞ –≥–µ—Ç–∫—É—Ä—Å–µ\n"
                 f"- —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–∞—à–∏—Ö —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö\n"
                 f"- –æ–±—â–∞—Ç—å—Å—è —Å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ ü©µ",
            parse_mode=enums.ParseMode.HTML,
        )

@telegram_client.client.on_message(
    filters.text & filters.chat([-1001600505428]) & filters.regex(r'migrate_users_to_prod'))
async def handle_migrate_members(client, message: Message):
    async for member in message.chat.get_members():
        if not repo.check_user_welcome(member.user.id):
            user_data = UserToWelcome(
                tg_id=member.user.id,
                first_name=member.user.first_name,
                username=member.user.username or "",
            )

            repo.create_new_welcome(user_data)

            print(f"‚úÖ C–æ—Ö—Ä–∞–Ω–∏–ª {member.user.first_name}")

            await asyncio.sleep(0.5)


async def run_pyrogram_handlers():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Pyrogram –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    print("üöÄ –°—Ç–∞—Ä—Ç—É—é —Ç–µ–ª–µ–≥—Ä–∞–º —é–∑–µ—Ä –±–æ—Ç–∞")
    try:
        await telegram_client.start()
        await idle()
    except Exception as e:
        print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await graceful_shutdown()



@app.get("/")
async def root():
    return {"status": "OK"}


if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(run_pyrogram_handlers())
    except KeyboardInterrupt:
        print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    finally:
        if loop.is_running():
            loop.close()
        print("üëã –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
